name: Quality Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: '.go-version'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=10m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: '.go-version'
          cache: true

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: gosec.sarif
        continue-on-error: true

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: '.go-version'
          cache: true

      - name: Verify dependencies
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Check for known vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...

      - name: Generate test coverage report
        if: matrix.go-version == '1.21'
        run: |
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        if: matrix.go-version == '1.21'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.html

      - name: Check test coverage
        if: matrix.go-version == '1.21'
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total test coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 60" | bc -l) )); then
            echo "‚ùå Test coverage is below 60%"
            exit 1
          else
            echo "‚úÖ Test coverage is above 60%"
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: '.go-version'
          cache: true

      - name: Build binaries
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          # Build mitosisd
          go build -o build/mitosisd-${GOOS}-${GOARCH} ./cmd/mitosisd
          
          # Build mito CLI
          go build -o build/mito-${GOOS}-${GOARCH} ./cmd/mito
          
          # Build midevtool
          go build -o build/midevtool-${GOOS}-${GOARCH} ./cmd/midevtool

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/*

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: '.go-version'
          cache: true

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem -run=^$ ./... > benchmark.txt
          echo "üìä Benchmark Results:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat benchmark.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, security, dependency-check, test, build]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          
          if [[ "${{ needs.lint.result }}" != "success" || 
                "${{ needs.security.result }}" != "success" || 
                "${{ needs.dependency-check.result }}" != "success" || 
                "${{ needs.test.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå Quality gate failed"
            exit 1
          else
            echo "‚úÖ Quality gate passed"
          fi 