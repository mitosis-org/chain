// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mitosis/evmvalidator/v1/query.proto

package evmvalidatorv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                          = "/mitosis.evmvalidator.v1.Query/Params"
	Query_ValidatorEntrypointContractAddr_FullMethodName = "/mitosis.evmvalidator.v1.Query/ValidatorEntrypointContractAddr"
	Query_Validator_FullMethodName                       = "/mitosis.evmvalidator.v1.Query/Validator"
	Query_ValidatorByConsAddr_FullMethodName             = "/mitosis.evmvalidator.v1.Query/ValidatorByConsAddr"
	Query_Validators_FullMethodName                      = "/mitosis.evmvalidator.v1.Query/Validators"
	Query_Withdrawal_FullMethodName                      = "/mitosis.evmvalidator.v1.Query/Withdrawal"
	Query_Withdrawals_FullMethodName                     = "/mitosis.evmvalidator.v1.Query/Withdrawals"
	Query_WithdrawalsByValidator_FullMethodName          = "/mitosis.evmvalidator.v1.Query/WithdrawalsByValidator"
	Query_CollateralOwnerships_FullMethodName            = "/mitosis.evmvalidator.v1.Query/CollateralOwnerships"
	Query_CollateralOwnershipsByValidator_FullMethodName = "/mitosis.evmvalidator.v1.Query/CollateralOwnershipsByValidator"
	Query_CollateralOwnership_FullMethodName             = "/mitosis.evmvalidator.v1.Query/CollateralOwnership"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the parameters of the x/evmvalidator module
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ValidatorEntrypointContractAddr returns the address of the entrypoint
	// contract for validators
	ValidatorEntrypointContractAddr(ctx context.Context, in *QueryValidatorEntrypointContractAddrRequest, opts ...grpc.CallOption) (*QueryValidatorEntrypointContractAddrResponse, error)
	// Validator returns validator details by address
	Validator(ctx context.Context, in *QueryValidatorRequest, opts ...grpc.CallOption) (*QueryValidatorResponse, error)
	// ValidatorByConsAddr returns validator details by consensus address
	ValidatorByConsAddr(ctx context.Context, in *QueryValidatorByConsAddrRequest, opts ...grpc.CallOption) (*QueryValidatorByConsAddrResponse, error)
	// Validators returns all validators
	Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error)
	// Withdrawal returns withdrawal details by ID
	Withdrawal(ctx context.Context, in *QueryWithdrawalRequest, opts ...grpc.CallOption) (*QueryWithdrawalResponse, error)
	// Withdrawals returns all withdrawals
	Withdrawals(ctx context.Context, in *QueryWithdrawalsRequest, opts ...grpc.CallOption) (*QueryWithdrawalsResponse, error)
	// WithdrawalsByValidator returns withdrawals for a specific validator
	WithdrawalsByValidator(ctx context.Context, in *QueryWithdrawalsByValidatorRequest, opts ...grpc.CallOption) (*QueryWithdrawalsByValidatorResponse, error)
	// CollateralOwnerships returns all collateral ownerships
	CollateralOwnerships(ctx context.Context, in *QueryCollateralOwnershipsRequest, opts ...grpc.CallOption) (*QueryCollateralOwnershipsResponse, error)
	// CollateralOwnershipsByValidator returns all collateral ownerships for a
	// specific validator
	CollateralOwnershipsByValidator(ctx context.Context, in *QueryCollateralOwnershipsByValidatorRequest, opts ...grpc.CallOption) (*QueryCollateralOwnershipsByValidatorResponse, error)
	// CollateralOwnership returns the collateral ownership for a specific
	// validator and owner
	CollateralOwnership(ctx context.Context, in *QueryCollateralOwnershipRequest, opts ...grpc.CallOption) (*QueryCollateralOwnershipResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorEntrypointContractAddr(ctx context.Context, in *QueryValidatorEntrypointContractAddrRequest, opts ...grpc.CallOption) (*QueryValidatorEntrypointContractAddrResponse, error) {
	out := new(QueryValidatorEntrypointContractAddrResponse)
	err := c.cc.Invoke(ctx, Query_ValidatorEntrypointContractAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validator(ctx context.Context, in *QueryValidatorRequest, opts ...grpc.CallOption) (*QueryValidatorResponse, error) {
	out := new(QueryValidatorResponse)
	err := c.cc.Invoke(ctx, Query_Validator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorByConsAddr(ctx context.Context, in *QueryValidatorByConsAddrRequest, opts ...grpc.CallOption) (*QueryValidatorByConsAddrResponse, error) {
	out := new(QueryValidatorByConsAddrResponse)
	err := c.cc.Invoke(ctx, Query_ValidatorByConsAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error) {
	out := new(QueryValidatorsResponse)
	err := c.cc.Invoke(ctx, Query_Validators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Withdrawal(ctx context.Context, in *QueryWithdrawalRequest, opts ...grpc.CallOption) (*QueryWithdrawalResponse, error) {
	out := new(QueryWithdrawalResponse)
	err := c.cc.Invoke(ctx, Query_Withdrawal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Withdrawals(ctx context.Context, in *QueryWithdrawalsRequest, opts ...grpc.CallOption) (*QueryWithdrawalsResponse, error) {
	out := new(QueryWithdrawalsResponse)
	err := c.cc.Invoke(ctx, Query_Withdrawals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawalsByValidator(ctx context.Context, in *QueryWithdrawalsByValidatorRequest, opts ...grpc.CallOption) (*QueryWithdrawalsByValidatorResponse, error) {
	out := new(QueryWithdrawalsByValidatorResponse)
	err := c.cc.Invoke(ctx, Query_WithdrawalsByValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollateralOwnerships(ctx context.Context, in *QueryCollateralOwnershipsRequest, opts ...grpc.CallOption) (*QueryCollateralOwnershipsResponse, error) {
	out := new(QueryCollateralOwnershipsResponse)
	err := c.cc.Invoke(ctx, Query_CollateralOwnerships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollateralOwnershipsByValidator(ctx context.Context, in *QueryCollateralOwnershipsByValidatorRequest, opts ...grpc.CallOption) (*QueryCollateralOwnershipsByValidatorResponse, error) {
	out := new(QueryCollateralOwnershipsByValidatorResponse)
	err := c.cc.Invoke(ctx, Query_CollateralOwnershipsByValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollateralOwnership(ctx context.Context, in *QueryCollateralOwnershipRequest, opts ...grpc.CallOption) (*QueryCollateralOwnershipResponse, error) {
	out := new(QueryCollateralOwnershipResponse)
	err := c.cc.Invoke(ctx, Query_CollateralOwnership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Params returns the parameters of the x/evmvalidator module
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ValidatorEntrypointContractAddr returns the address of the entrypoint
	// contract for validators
	ValidatorEntrypointContractAddr(context.Context, *QueryValidatorEntrypointContractAddrRequest) (*QueryValidatorEntrypointContractAddrResponse, error)
	// Validator returns validator details by address
	Validator(context.Context, *QueryValidatorRequest) (*QueryValidatorResponse, error)
	// ValidatorByConsAddr returns validator details by consensus address
	ValidatorByConsAddr(context.Context, *QueryValidatorByConsAddrRequest) (*QueryValidatorByConsAddrResponse, error)
	// Validators returns all validators
	Validators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error)
	// Withdrawal returns withdrawal details by ID
	Withdrawal(context.Context, *QueryWithdrawalRequest) (*QueryWithdrawalResponse, error)
	// Withdrawals returns all withdrawals
	Withdrawals(context.Context, *QueryWithdrawalsRequest) (*QueryWithdrawalsResponse, error)
	// WithdrawalsByValidator returns withdrawals for a specific validator
	WithdrawalsByValidator(context.Context, *QueryWithdrawalsByValidatorRequest) (*QueryWithdrawalsByValidatorResponse, error)
	// CollateralOwnerships returns all collateral ownerships
	CollateralOwnerships(context.Context, *QueryCollateralOwnershipsRequest) (*QueryCollateralOwnershipsResponse, error)
	// CollateralOwnershipsByValidator returns all collateral ownerships for a
	// specific validator
	CollateralOwnershipsByValidator(context.Context, *QueryCollateralOwnershipsByValidatorRequest) (*QueryCollateralOwnershipsByValidatorResponse, error)
	// CollateralOwnership returns the collateral ownership for a specific
	// validator and owner
	CollateralOwnership(context.Context, *QueryCollateralOwnershipRequest) (*QueryCollateralOwnershipResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) ValidatorEntrypointContractAddr(context.Context, *QueryValidatorEntrypointContractAddrRequest) (*QueryValidatorEntrypointContractAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorEntrypointContractAddr not implemented")
}
func (UnimplementedQueryServer) Validator(context.Context, *QueryValidatorRequest) (*QueryValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validator not implemented")
}
func (UnimplementedQueryServer) ValidatorByConsAddr(context.Context, *QueryValidatorByConsAddrRequest) (*QueryValidatorByConsAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorByConsAddr not implemented")
}
func (UnimplementedQueryServer) Validators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validators not implemented")
}
func (UnimplementedQueryServer) Withdrawal(context.Context, *QueryWithdrawalRequest) (*QueryWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdrawal not implemented")
}
func (UnimplementedQueryServer) Withdrawals(context.Context, *QueryWithdrawalsRequest) (*QueryWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdrawals not implemented")
}
func (UnimplementedQueryServer) WithdrawalsByValidator(context.Context, *QueryWithdrawalsByValidatorRequest) (*QueryWithdrawalsByValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalsByValidator not implemented")
}
func (UnimplementedQueryServer) CollateralOwnerships(context.Context, *QueryCollateralOwnershipsRequest) (*QueryCollateralOwnershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollateralOwnerships not implemented")
}
func (UnimplementedQueryServer) CollateralOwnershipsByValidator(context.Context, *QueryCollateralOwnershipsByValidatorRequest) (*QueryCollateralOwnershipsByValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollateralOwnershipsByValidator not implemented")
}
func (UnimplementedQueryServer) CollateralOwnership(context.Context, *QueryCollateralOwnershipRequest) (*QueryCollateralOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollateralOwnership not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorEntrypointContractAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorEntrypointContractAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorEntrypointContractAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ValidatorEntrypointContractAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorEntrypointContractAddr(ctx, req.(*QueryValidatorEntrypointContractAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Validator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validator(ctx, req.(*QueryValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorByConsAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorByConsAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorByConsAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ValidatorByConsAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorByConsAddr(ctx, req.(*QueryValidatorByConsAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Validators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validators(ctx, req.(*QueryValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Withdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Withdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Withdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Withdrawal(ctx, req.(*QueryWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Withdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Withdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Withdrawals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Withdrawals(ctx, req.(*QueryWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawalsByValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawalsByValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawalsByValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WithdrawalsByValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawalsByValidator(ctx, req.(*QueryWithdrawalsByValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollateralOwnerships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollateralOwnershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollateralOwnerships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CollateralOwnerships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollateralOwnerships(ctx, req.(*QueryCollateralOwnershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollateralOwnershipsByValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollateralOwnershipsByValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollateralOwnershipsByValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CollateralOwnershipsByValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollateralOwnershipsByValidator(ctx, req.(*QueryCollateralOwnershipsByValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollateralOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollateralOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollateralOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CollateralOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollateralOwnership(ctx, req.(*QueryCollateralOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mitosis.evmvalidator.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ValidatorEntrypointContractAddr",
			Handler:    _Query_ValidatorEntrypointContractAddr_Handler,
		},
		{
			MethodName: "Validator",
			Handler:    _Query_Validator_Handler,
		},
		{
			MethodName: "ValidatorByConsAddr",
			Handler:    _Query_ValidatorByConsAddr_Handler,
		},
		{
			MethodName: "Validators",
			Handler:    _Query_Validators_Handler,
		},
		{
			MethodName: "Withdrawal",
			Handler:    _Query_Withdrawal_Handler,
		},
		{
			MethodName: "Withdrawals",
			Handler:    _Query_Withdrawals_Handler,
		},
		{
			MethodName: "WithdrawalsByValidator",
			Handler:    _Query_WithdrawalsByValidator_Handler,
		},
		{
			MethodName: "CollateralOwnerships",
			Handler:    _Query_CollateralOwnerships_Handler,
		},
		{
			MethodName: "CollateralOwnershipsByValidator",
			Handler:    _Query_CollateralOwnershipsByValidator_Handler,
		},
		{
			MethodName: "CollateralOwnership",
			Handler:    _Query_CollateralOwnership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mitosis/evmvalidator/v1/query.proto",
}
